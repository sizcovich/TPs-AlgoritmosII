{\rtf1\ansi\ansicpg1252\cocoartf1187
{\fonttbl\f0\fnil\fcharset0 LucidaGrande;\f1\froman\fcharset0 TimesNewRomanPSMT;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;}
\paperw11900\paperh16840\margl1440\margr1440\margb1417\margt1417\vieww11940\viewh13480\viewkind1
\deftab720
\pard\pardeftab720\ri0

\f0\fs26 \cf2 TAD LINK es STRING\
TAD NOMBRE es STRING \
TAD FECHA es NAT\
\
TAD ARBOL DE CATEGORIAS\
\
0) g\'e9neros abcat\
\
I) exporta abcat, generadores, observadores b\'e1sicos, todasLasCategorias\
\
II) usa Nombre\
\
III)igualdad observacional: ($\\forall$ $a_\{1\}$, $a_\{2\}$ : abcat)($a_\{1\}$ $=_\{obs\}$ $a_\{2\}$ $\\Leftrightarrow$ categoria($a_\{1\}$) $=_\{obs\}$ categoria($a_\{2\}$) $\\land$ subcategorias($a_\{1\}$) $=_\{obs\}$ subcategorias($a_\{2\}$))\
\
IV) observadores b\'e1sicos \
\
categoria: abcat -> nombre\
\
subcategorias: abcat -> conj(abcat)\
\
V) generadores \
\
nodo: nombre n x conj(abcat) c -> abcat 		\{nombreUnico (n, c)\}\
\
VI) otras operaciones\
\
nombreUnico: nombre x conj(abcat) -> bool\
\
sacarNombres: conj(abcat) -> conj(nombre)\
\
todasLasCategorias: abcat -> conj(nombre)\
\
VII) AXIOMAS\
\
($\\forall$ a: abcat, n: nombre, ca: conj(abcat))\
\
categoria (nodo(n, conj(a))) $\\equiv$ n\
\
subcategorias (nodo(n, conj(a))) \\equiv conj(a)\
\
nombreUnico (n, ca) \\equiv \\neg (n \\in sacarNombres(ca))\
\
sacarNombres (ca) \\equiv if \\emptyset? (ca) then \\emptyset else todasLasCategorias (dameUno (ca)) \\cup sacarNombres(sinUno (ca))\
\
todasLasCategorias(a) \\equiv Ag(categoria (a) , sacarNombres (subcategorias (a)))\
\
Fin TAD\
\
\
TAD SISTEMA\
\
0)igualdad observacional: (\\forall s_\{1\}, s_\{2\}: sist) (s_\{1\} =_\{obs\} s_\{2\} \\Leftrightarrow (arbol(s_\{1\}) =_\{obs\} arbol(s_\{2\})) \\and (todosLosLinks(s_\{1\}) =_\{obs\} todosLosLinks(s_\{2\}) \\andlogic ((\\forall l: link \\in todosLosLinks(s_\{1\})) visitas(l, s_\{1\}) =_\{obs\} visitas(l, s_\{2\}) ) \\andlogic ((\\forall l: link \\in todosLosLinks(s_\{1\})) categoria(l, s_\{1\}) =_\{obs\} categoria(l, s_\{2\})))\
\
I) g\'e9neros sist\
\
II) usa Fecha, Link, Nombre, Arbol de categorias \
\
III) exporta sist, generadores, observadores b\'e1sicos \
\
IV) generadores \
\
inicio: abcat -> sist\
\
registrarLink: link l x nombre n x sist s  -> sist  \{linkUnico (l, s) ^ nombreEnSist (n, s)\}\
\
registrarAcceso: fecha f x link l x sist s -> sist   \{linkEnSist (l, s)\}\
\
V) observadores b\'e1sicos \
\
arbol: sist -> abcat\
\
todosLosLinks: sist -> conj(link)\
\
visitas: link x sist -> conj(fecha)\
\
categoria: link l x sist s -> nombre   \{ linkEnSist (l, s)\}\
\
VI) otras operaciones\
\
linkUnico: link x sist -> bool\
\
nombreEnSist: nombre x sist -> bool\
\
linkEnSist: link x sist -> bool\
\
VII) AXIOMAS\
\
\\forall l,l\'92: link \\forall s: sist \\forall a: abcat \\forall n,n\'92: nombre \\forall f: fecha\
\
todosLosLinks (inicio(a)) \\equiv \\emptyset\
\
todosLosLinks (registrarAcceso(f, l, s)) \\equiv todosLosLinks(s)\
\
todosLosLinks (registrarLink(l, n, s)) \\equiv Ag(l, todosLosLinks(s))\
\
visitas (l, inicio(a)) \\equiv \\emptyset\
\
visitas (l, registrarAcceso(f, l\'92, s)) \\equiv if (l = l\'92) then Ag(f, visitas(l ,s)) else visitas (l, s) fi\
\
visitas (l, registrarLink(l\'92, n, s)) \\equiv visitas (l, s)\
\
categoria (l, registrarAcceso(f, l\'92, s)) \\equiv categoria (l, s)\
\
categoria (l, registrarLink(l\'92, n, s)) \\equiv if (l = l\'92) then n else categoria (l, s) fi\
\
arbol (inicio(a)) \\ equiv a\
\
arbol (registrarAcceso(f, l, s)) \\equiv arbol (s)\
\
arbol (registrarLink(l, n, s)) \\equiv arbol (s)\
\
linkUnico (l, inicio(a)) \\ equiv true\
\
linkUnico (l, registrarAcceso(f, l\'92, s)) \\equiv linkUnico (l, s)\
\
linkUnico (l, registrarLink(l\'92, n, s)) \\equiv if (l = l\'92) then false else linkUnico (l, s) fi\
\
nombreEnSist (n, inicio(a)) \\ equiv \\neg(n \\in todasLasCategorias (a))\
\
nombreEnSist (n, registrarAcceso(f, l, s)) \\equiv nombreEnSist (n, s)\
\
nombreEnSist (n, registrarLink(l, n\'92, s)) \\equiv nombreEnSist (n, s)\
\
linkEnSist (l, inicio(a)) \\ equiv false\
\
linkEnSist (l, registrarAcceso(f, l\'92, s)) \\equiv linkEnSist (l, s)\
\
linkEnSist (l, registrarLink(l\'92, n, s)) \\equiv if (l = l\'92) then true else linkEnSist (l, s) fi\
\
Fin TAD
\f1\fs24 \cf0 \
}